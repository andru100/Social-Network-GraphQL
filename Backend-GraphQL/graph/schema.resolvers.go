package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	//"github.com/99designs/gqlgen/graphql"
	"github.com/andru100/Graphql-Social-Network/graph/model"
	"github.com/andru100/Graphql-Social-Network/graph/social"
)

// Signin is the resolver for the Signin field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.UsrsigninInput) (*model.Jwtdata, error) {
	result, err := social.Signin(input.Username, input.Password)
	if err != nil {
		return nil, err
	}
	return &model.Jwtdata{Token: *result}, err
	panic(fmt.Errorf("not implemented: Signin - Signin"))
}

// SignUp is the resolver for the SignUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.NewUserDataInput) (*model.Jwtdata, error) {
	result, err := social.SignUp(&input)
	if err != nil {
		return nil, err
	}
	return &model.Jwtdata{Token: result}, err
	panic(fmt.Errorf("not implemented: SignUp - SignUp"))
}

// LikeComment is the resolver for the LikeComment field.
func (r *mutationResolver) LikeComment(ctx context.Context, input model.SendLikeInput) (*model.MongoFields, error) {
	result, err := social.LikeCmt(input)
	if err != nil {
		return nil, err
	}
	return result, err
	panic(fmt.Errorf("not implemented: LikeComment - LikeComment"))
}

// ReplyComment is the resolver for the ReplyComment field.
func (r *mutationResolver) ReplyComment(ctx context.Context, input model.ReplyCommentInput) (*model.MongoFields, error) {
	result, err := social.Reply2Comment(input)
	if err != nil {
		return nil, err
	}
	return result, err
	panic(fmt.Errorf("not implemented: ReplyComment - ReplyComment"))
}

// NewComment is the resolver for the NewComment field.
func (r *mutationResolver) NewComment(ctx context.Context, input model.SendCmtInput) (*model.MongoFields, error) {
	result, err := social.NewComment(input)
	if err != nil {
		return nil, err
	}
	return result, err
	panic(fmt.Errorf("not implemented: NewComment - NewComment"))
}

// PostFile is the resolver for the PostFile field.
// func (r *mutationResolver) PostFile(ctx context.Context, file graphql.Upload) (*model.MongoFields, error) {
// 	fmt.Println("in postfile")
// 	result, err := social.PostFile(file)
// 	if err != nil {
// 		fmt.Println("post file err", err)
// 		return nil, err
// 	}
// 	return result, err
// 	panic(fmt.Errorf("not implemented: PostFile - PostFile"))
// }

// UpdateBio is the resolver for the UpdateBio field.
func (r *mutationResolver) UpdateBio(ctx context.Context, input model.UpdateBioInput) (*model.MongoFields, error) {
	result, err := social.UpdateBio(input)
	if err != nil {
		return nil, err
	}
	return result, err
	panic(fmt.Errorf("not implemented: UpdateBio - UpdateBio"))
}

// Chkauth is the resolver for the Chkauth field.
func (r *queryResolver) Chkauth(ctx context.Context, input model.JwtdataInput) (*model.Authd, error) {
	//deref := (input).Token
	fmt.Println("token iss", input.Token)
	result, err := social.Chkauth(&input.Token)
	if err != nil {
		return nil, err
	}
	return result, err
	panic(fmt.Errorf("not implemented: Chkauth - Chkauth"))
}

// GetAllComments is the resolver for the GetAllComments field.
func (r *queryResolver) GetAllComments(ctx context.Context, username string) (*model.MongoFields, error) {
	result, err := social.GetAllComments(username)
	if err != nil {
		return nil, err
	}
	return result, err
	panic(fmt.Errorf("not implemented: GetAllComments - GetAllComments"))
}

// GetUserComments is the resolver for the GetUserComments field.
func (r *queryResolver) GetUserComments(ctx context.Context, username string) (*model.MongoFields, error) {
	result, err := social.GetUserComments(username)
	if err != nil {
		return nil, err
	}
	return result, err
	panic(fmt.Errorf("not implemented: GetUserComments - GetUserComments"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }