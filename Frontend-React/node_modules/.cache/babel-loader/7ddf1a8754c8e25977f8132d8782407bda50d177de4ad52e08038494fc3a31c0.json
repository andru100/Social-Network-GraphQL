{"ast":null,"code":"import _regeneratorRuntime from\"/home/andru/Code/Social-Monolyth-GQL/Frontend-React/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/home/andru/Code/Social-Monolyth-GQL/Frontend-React/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";export default function SendData(_x,_x2){return _SendData.apply(this,arguments);}function _SendData(){_SendData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(request,variables){var GQLpayload,options,postUrl,response,convert;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:// send data to GraphQL\nGQLpayload={\"query\":request,\"variables\":variables};options={method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(GQLpayload)};postUrl=process.env.REACT_APP_BACKEND_GRAPHQL+\"/query\";/* + process.env.REACT_APP_BACKEND_PORT  */_context.next=5;return fetch(postUrl,options);case 5:response=_context.sent;_context.next=8;return response.json();case 8:convert=_context.sent;console.log(\"response from GraphQL\",convert);if(!(\"errors\"in convert)){_context.next=14;break;}// if password is a match redirect to profile page\nconsole.log(\"error sending data\",convert.errors);_context.next=15;break;case 14:return _context.abrupt(\"return\",convert);case 15:case\"end\":return _context.stop();}},_callee);}));return _SendData.apply(this,arguments);}","map":{"version":3,"names":["SendData","request","variables","GQLpayload","options","method","headers","body","JSON","stringify","postUrl","process","env","REACT_APP_BACKEND_GRAPHQL","fetch","response","json","convert","console","log","errors"],"sources":["/home/andru/Code/Social-Monolyth-GQL/Frontend-React/src/routes/SendData.jsx"],"sourcesContent":["export default async function SendData (request, variables ) { // send data to GraphQL\n    \n    let GQLpayload = {\n        \"query\": request,\n        \"variables\":variables\n    }\n   \n    let options = {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(GQLpayload)\n    }\n\n    let postUrl = process.env.REACT_APP_BACKEND_GRAPHQL + \"/query\" /* + process.env.REACT_APP_BACKEND_PORT  */\n    let response = await fetch(postUrl, options)\n    let convert = await response.json ()\n\n    console.log(\"response from GraphQL\", convert)\n    \n    if ( \"errors\" in convert ){ // if password is a match redirect to profile page\n        console.log(\"error sending data\" , convert.errors )\n    } else {\n        return convert\n    }\n\n}"],"mappings":"kSAAA,uBAA8BA,SAAQ,iDA2BrC,yFA3Bc,iBAAyBC,OAAO,CAAEC,SAAS,mKAAK;AAEvDC,UAAU,CAAG,CACb,OAAO,CAAEF,OAAO,CAChB,WAAW,CAACC,SAChB,CAAC,CAEGE,OAAO,CAAG,CACVC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACT,cAAc,CAAE,kBAChB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACN,UAAU,CACnC,CAAC,CAEGO,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,CAAG,QAAQ,CAAC,iEAC1CC,MAAK,CAACJ,OAAO,CAAEN,OAAO,CAAC,QAAxCW,QAAQ,qCACQA,SAAQ,CAACC,IAAI,EAAG,QAAhCC,OAAO,eAEXC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEF,OAAO,CAAC,MAExC,QAAQ,EAAIA,QAAO,2BAAI;AACxBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAGF,OAAO,CAACG,MAAM,CAAE,gEAE5CH,OAAO,wDAGrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}